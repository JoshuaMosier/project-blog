// Generated file - do not edit directly
export const postContent = {
  "boxx": "I built these custom arcade-style Super Smash Bros. Melee controllers as a birthday gift for my brother. Click on the gallery above for more images and videos of both builds! ## The Build Process This build is actually two separate controllers, Version 1 was built in July 2021 and Version 2 was built in June 2023. ## Version 1 ### V1 Components - **Frame:** Two-part MDF frame - **Keycaps:** SLA resin printed - **Switchplate:** Custom steel switchplate from sendcutsend - **Microcontroller:** Raspberry pi pico running [haybox firmware](https://github.com/JonnyHaystack/HayBox). - **Gamecube Cable:** I soldered a cable from the pico and hand-crimped and asssembled the gamecube adapter port. Version 1 was built more or less based off the original smash boxx design. I designed a two part frame with a top panel and bottom plate that sandwiched the steel switchplate. The switch wiring was pretty simple to hand solder together with a raspberry pi pico and some electrical tape to isolate the wires and pico from the switchplate. The assembly was a bit tedious having to manually drill out each button mounting hole based on the switch plate, but in the end it came together pretty well. My brother used version as his primary controller for over a year but eventually found the buttons started to wear against the side of the case and weren't as reliable for high APM play. As a birthday gift I decided to build a version 2 taking into account some of the lessons I learned from the first build. ## Version 2 This time I new that I wanted to try and customize the shape of the controller a bit more and make it more durable. ### V2 Components - **Frame:** Resin printed case from JLC & Steel backplate from sendcutsend - **Keycaps:** Multicolor PLA & Nylon - **Switchplate:** Integrated into the case - **Microcontroller:** Raspberry pi pico running [haybox firmware](https://github.com/JonnyHaystack/HayBox). - **Gamecube Cable:** Detachable USB-C to GCC cable - **Misc:** Foam insert, adhesive neoprene, and threaded inserts to mount the backplate. ### Design Changes I modelled a new shape based on the frame1 button layout and integrated the switch mountingplate into the case. I ordered two cases to be resin printed from JLC and then sanded, primed, painted them matte black, and clear coated them with SprayMax 2k so it will stand up to oil and sweat. The additional features with this build were filling the internal space with a custom laser-cut foam insert to dampen the sound of the switches. The controller backplate was also made of steel this time and I added adhesive neoprene rubber pad underneath to make it more comfortable and give it a bit more grip. This time, instead of wiring the switches directly to the pico I used switch sockets to make it easier to swap out switches. The first iteration of the keycaps were multicolor printed with my Bambulab X1C to label each of the buttons. ### Final Touches After version 2 was completed, I added a USB-C port to the case with a detachable cable, along with a mini-keyboard carrying case which perfectly fit the controller. I also custom ordered a set of nylon keycaps from JLC to match the aesthetic of the controller. ## Conclusion I've been very pleased with how both builds turned out, but version 2 definitely took it up a notch with the aesthetics where it now feels like a real product. The controller has lasted over a year now and is still in great condition, I will have to see if there is a v3 in the future with a custom PCB.",
  "chief-helmet": "I created this custom floating Master Chief helmet as a personal project to combine my love of Halo, 3D printing, and some light engineering. ## The Build Process This build took me about 3-4 weeks to complete, blending detailed resin 3D printing, precision painting, and magnetic levitation to achieve the floating effect. Here’s a quick overview of the key elements: - **3D printed Master Chief helmet model** – The helmet body and visor were printed separately. - **Custom levitation base** – designed after the cortana AI chip to house the electronics. - **Magnetic levitation kit** – a diy maglev unit using both rare-earth and electromagnets. - **Hand-painted details** – featuring metallic gold for the visor and Halo’s classic olive green armor finish. ## Technical Details The 3D printing process alone required around **18 hours of total print time**: - 12 hours for the two helmet halves. - 6 hours for the base components. Resin-based 3D printing allowed for incredible precision, capturing every detail of the helmet design. Post-printing, the pieces underwent thorough cleaning, curing, and sanding to achieve a smooth surface for painting. The **levitation platform** was designed after the cortana AI chip to conceal the maglev electronics within a sleek base that adds to the sci-fi aesthetic. The final display measures approximately 20 centimeters high. ## Learning Experience This project was a fun challenge that taught me a lot—especially about combining creative design with technical engineering. Achieving a realistic floating effect was a fun challenge, but seeing the helmet float for the first time was *incredibly* rewarding. Painting was another highlight of the build. Using acrylics, metallic washes, and weathering techniques, I was able to bring out the Master Chief’s iconic battle-worn look. --- This floating helmet combines fan art, craftsmanship, and some Halo-inspired innovation—making it one of my favorite projects to date. Whether you’re a gamer or just enjoy seeing 3D printing brought to life, this piece is a small tribute to the legendary Spartan himself. ---",
  "cinetrics": "Ever spend more time scrolling through Netflix than actually watching something? We built Cinetrics to solve this common dilemma by matching you with film critics who share your taste in movies. ## The Problem With countless streaming options available today, finding quality content has become increasingly challenging. While there are many movie critics out there, finding one whose taste aligns with yours traditionally required reading through countless reviews - until now. ## Our Solution Cinetrics is an intelligent recommendation platform that pairs users with professional movie critics based on their viewing preferences. By rating just a handful of movies, our algorithm identifies critics whose taste matches yours, providing personalized and reliable movie recommendations. ## Technical Implementation We built Cinetrics using a modern tech stack focused on scalability and real-time processing: - **Frontend**: React-based single-page application - **Backend**: Python API with asynchronous event handling - **Database**: CockroachDB for reliable data storage - **Infrastructure**: Google Cloud Platform (App Engine and Cloud SQL) - **Data Sources**: Rotten Tomatoes critic reviews and TMDb API for movie metadata ### Smart Rating Analysis Unlike traditional review aggregators (IMDb, Rotten Tomatoes, Metacritic), we developed a sophisticated algorithm that: - Normalizes different rating scales used by critics - Aligns critic opinions with audience perspectives - Requires minimal user input to generate accurate matches - Uses encrypted communication and secure password storage ## Future Developments We're working on implementing machine learning capabilities to: - Predict critic ratings for unreviewed movies - Generate realistic movie ratings based on review history - Reduce the number of user ratings needed for accurate matching *This project won the MLH Best Use of CockroachDB award at VTHacks 8.*",
  "ghost-banshee": "# Halo Reach: Ghost # Halo Reach: Banshee I created these custom floating Halo Ghost and Banshee models as part of a secret santa project. Click on the image galleries above to see more of the build process! ## The Build Process This project started in October 2021 and was completed in December 2021. Here's a quick overview of the key elements: - **3D printed Ghost and Banshee models** – Each Covenant vehicle was modeled after the game assets and printed in multiple parts for optimal detail. - **Custom levitation bases** – Designed to house the electronics and complement the Covenant aesthetic featuring the seventh column logo - **Magnetic levitation kit** – DIY maglev units using both rare-earth and electromagnets - **Wireless LED system** – Custom-integrated lighting that powers on without physical connections through wireless power coils. - **Hand-painted details** – Featuring the iconic purple/blue Covenant color scheme with color-shiftmetallic finishes ## Technical Details The 3D printing process went through multiple iterations: - Initial prototypes in PLA to test fit and levitation - Final versions in resin for superior detail and finish - Multiple test prints to perfect the wireless LED housing Resin-based 3D printing allowed for incredible precision, capturing every detail of these iconic Covenant vehicles. Post-printing, the pieces underwent thorough cleaning, curing, and sanding to achieve a smooth surface for painting. The levitation platforms were designed to conceal the maglev electronics while maintaining the Covenant aesthetic. The wireless LED system was particularly challenging to integrate, requiring careful consideration of weight distribution to maintain stable levitation while achieving the underside glow. ## Learning Experience This project was a fun challenge building from some of my previous projects with these DIY maglev kits like the [Baby Yoda Crib](/posts/maglev-baby-yoda). I always enjoy pushing the envelope with these projects so I'm super pleased with how the wireless LEDs turned out.",
  "maglev-baby-yoda": "A custom magnetic levitating Baby Yoda display I created as a Christmas gift for my sister, combining 3D printing, painting, and electronics to bring a piece of The Mandalorian to life. ## The Build Process This project was a labor of love that took about 3-4 weeks to complete. It combines several elements: - 3D printed Baby Yoda model from Inspyre 3D - Modified floating pram from Multiverse3DDesigns - Custom-designed base created in Meshmixer - Magnetic levitation kit for the floating effect - Hand-painted details using acrylics and wash paints ## Technical Details The build involved approximately 15 hours of total print time: - 10 hours for the pram - 2.5 hours for Baby Yoda - 2.5 hours for the base The base features a Beskar ingot-inspired design with the Empire logo, cleverly concealing the magnetic levitation electronics. The finished piece measures about 15 centimeters in diameter, making it a perfect desk display piece. ## Learning Experience This project represented several firsts for me, including my first experience with finishing and painting 3D prints. While there was definitely a learning curve, the end result was worth the effort. The combination of the floating pram and the hand-painted details really brings the piece to life. [View an article about the project →](https://htxt.co.za/2020/01/3d-printed-baby-yoda-has-a-magnetic-levitation-pram/)",
  "metalcasting": "I've been exploring metal casting using a Devilforge furnace to melt aluminum cans into custom medals, rings, and coins. ### Equipment List - **Furnace:** Devilforge propane furnace - **Crucible:** #4 Clay graphite crucible - **Mold Material:** Petrobond/Greensand - **Safety Gear:** Heat resistant gloves, face shield, leather apron - **Source Material:** Recycled aluminum cans ## Project Examples ### March Madness Tournament Medal The tournament medal was my first major casting project. I designed the medal in Blender with a realistic basketball texture. I printed the master pattern in resin with a tab to later attach a ribbon. This took a few attempts to get the mold right with greensand, but I was able to get a decent cast. ### Custom rings These rings were made mostly to test the precision of the casting and to practice surface finishing. The mold worked beautfilly but there was a lot of porosity in the cast. The rings were also surprisingly light but still felt durable. ### Themed coins These coins were made to show off the casting to friends and family. The coins pictured here are a mandalorian medallion, pirate treasure, a bitcoin, and a witcher medallion. ## Learning Experience This has definitely been an interesting experience, previously I wouldn't have thought I'd be able to make custom cast parts at home this easily. To go from 3d printing the master to casting a finished product has become not only a fun hobby, but also a useful skill to have. Since these projects I've switched to mainly using petrobond for the better surface detail in the mold, but I've also purchased a kayacast investment casting machine and a tabletop burnout furnace to try out lost-wax casting with resin parts.",
  "movie-posters": "I built a Python application that generates movie posters made up of thousands of tiny movie poster thumbnails. The program analyzes colors to create a larger image mosaic while maintaining visual coherence. ## The Technical Challenge Creating photo mosaics presents several interesting technical challenges: - Analyzing and matching colors effectively across thousands of images - Optimizing image processing for reasonable performance - Maintaining visual quality at both macro and micro scales - Handling different poster aspect ratios and sizes The core of the solution uses k-d trees for efficient color matching and PIL for image processing. Here's a simplified example of how the color matching works: ```python def build_kd_tree(color_data): points = [] filenames = [] for filename, details in color_data.items(): dominant_color = details['colors'][0] points.append(dominant_color) filenames.append(filename) return KDTree(points), filenames ``` ## Image Processing Pipeline The full process involves several steps: 1. Download and preprocess movie poster images 2. Extract dominant colors from each poster 3. Build a searchable color database 4. Generate the mosaic by matching target colors 5. Create final output in multiple sizes with proper DPI ## Optimization Techniques Some key optimizations I implemented: - Caching preprocessed image data in JSON - Using numpy for faster color calculations - Implementing parallel processing for image analysis - Pre-filtering images based on color characteristics ## Production Features Beyond the core mosaic generation, I added several features for production use: - Multiple output sizes (16x20\", 18x24\", 24x36\") - Border and borderless variants - High-resolution 300 DPI output - Preview image generation - Automated listing photo creation ## Lessons Learned This project taught me a lot about: - Color space mathematics and perception - Image processing optimization techniques - Working with large datasets of images - Balancing quality vs performance tradeoffs The most challenging aspect was tuning the color matching algorithm to produce visually pleasing results while maintaining reasonable processing times. *Built with Python, PIL, numpy, and lots of movie posters*",
  "nutricient": "A web application that optimizes meal choices in Virginia Tech dining halls using linear programming to help students maintain balanced nutrition while meeting their dietary goals. ## The Problem Many college students struggle to maintain a balanced diet while eating in dining halls. Whether trying to meet specific fitness goals, manage allergies, or simply eat healthily, it can be overwhelming to analyze nutritional information for every meal option. My brother's quest to maximize protein intake while maintaining balanced nutrition inspired me to tackle this challenge at scale. ## The Solution Nutricient is a web application that: - Automatically scrapes nutritional data from VT dining halls - Takes user inputs for: - Metabolic information - Dietary restrictions and allergies - Preferred dining locations - Target nutrient goals - Uses linear optimization (PuLP) to calculate ideal meal combinations - Minimizes calories while meeting nutritional targets - Allows users to iteratively refine results by excluding unwanted items ## Technical Implementation The application stack includes: - Python/Flask backend deployed on Google App Engine - Bootstrap-based single-page application frontend - Automated data collection using Google Cloud Functions and Cloud Scheduler - Data storage in Google Cloud Storage buckets - PuLP library for linear optimization calculations ## Key Challenges The biggest hurdles came from working with Google Cloud Platform: - Setting up reliable cron jobs for data collection - Managing cloud function deployments - Configuring storage buckets efficiently - Domain routing and DNS configuration ## Future Developments The project has several planned expansions: - Including on-campus restaurant nutritional data - Adding local grocery store options - Incorporating complete meal recipes - Improving edge case handling and form validation - Enhanced UI/UX improvements This project demonstrates how mathematical optimization can be applied to everyday problems, making it easier for students to maintain healthy eating habits while navigating campus dining options. [View the project on Devpost →](https://devpost.com/software/nutricient) *This project won 3rd place at VTHacks 7.*",
  "on-air": "It started with a simple problem: interruptions. Like many people, I’ve struggled to stay productive while working from home. Whether it was a roommate popping in during a meeting or family members not realizing I was trying to concentrate, I found myself needing a better way to communicate “I’m busy.” ## The Idea The concept was pretty straightforward: a small light that anyone could use to show when they’re busy, available, or need some quiet time. But I wanted to take it a step further. Instead of just being a “red light/green light” system, I thought: - Why not make it smart? - Why not integrate it with tools people already use, like Teams, Zoom, or Slack? ## What On Air Does *On Air* is essentially a connected status indicator, but it’s packed with features to make it flexible and useful: - **Customizable Colors and Patterns:** You can set up the colors and animations that work for you—whether it’s a steady red light for “Do Not Disturb”, green for \"I'm available”, or yellow for \"My meeting ends soon.” - **App and Calendar Syncing:** The light can automatically update based on your meeting schedule or even your status in tools like Microsoft Teams. - **Voice Assistant Integration:** You can change your status hands-free with Alexa or Google Assistant. - **Smart Automations:** The light can adapt to your environment. For example, it dims in the evening or changes based on triggers you set. ## Building the Project I learned a lot while building this. The biggest challenge was getting it to integrate seamlessly with all the tools people use—everyone has their own workflow, and *On Air* needed to fit into as many as possible. We also had to make sure it was easy to use right out of the box while still offering advanced features for power users. The hardware itself went through several iterations to get the size, brightness, and design just right. I wanted it to look clean and modern—something that could sit on a desk without feeling out of place. ## What’s Next There are so many possibilities for where this project could go. Some ideas I’m excited about: - Adding more platform integrations for things like Zoom Room systems or gaming setups. - Expanding environmental awareness, like automatically adjusting brightness based on room lighting. - Creating specialized modes for different use cases, like “focus” sessions or parental controls. ## Why It Matters Ultimately, I hope *On Air* makes it a little easier to carve out focus time in an increasingly noisy world. Whether you’re working, studying, or streaming, it’s a simple tool to help others respect your time and space.",
  "plotify": "Ever wondered what your music taste really looks like? While Spotify Wrapped gives us a yearly glimpse into our listening habits, I wanted to create something that could provide deeper insights at any time. Enter Plotify: a web application that transforms your Spotify data into meaningful visualizations. ## What is Plotify? Plotify is a web application that connects to your Spotify account to analyze and visualize your listening habits. It displays detailed information about your top artists, tracks, genres, and playlists through interactive charts and graphs. ## Technical Implementation Built during HooHacks 2021 in just 24 hours, Plotify combines several technologies: - **Backend**: Flask (Python) handles the server-side logic and Spotify API authentication - **Data Visualization**: Combination of D3.js and Chart.js for creating interactive visualizations - **API Integration**: Direct integration with Spotify's API for fetching user data - **Data Processing**: Python scripts for processing and organizing Spotify data into meaningful visualizations ## Features - Authorization with Spotify accounts - Visualization of top artists and tracks - Genre distribution analysis - Playlist insights - Timeline-based listening patterns ## Challenges and Learnings Building Plotify in 24 hours came with its share of challenges. Working with charting libraries under time pressure required quick decision-making and efficient troubleshooting. The project taught me valuable lessons about API integration, data visualization, and rapid development. ## Future Plans The current version of Plotify is just the beginning. Future plans include: - Support for uploading complete listening history - Long-term trend analysis - Music preference evolution tracking - Enhanced visualization options *This project was built for HooHacks 2021.*",
  "pullback": "For our kinematics term project, we developed a functional pullback toy car mechanism using 3D printing. The mechanism uses a gear system and spring to convert backward motion into forward movement through a dual gear train system. ## How It Works The pullback mechanism operates through a simple principle: when the car is pulled backward, the rear wheels' rotation engages a gear train connected to a torsion spring. The gearbox contains two gear trains - one for winding (reverse) and one for release (forward). Our calculations showed: - Theoretical output/input ratio: 12.25:1 - Measured displacement ratio: 22-25:1 - Reverse gear train ratio: 147:8 - Forward gear train ratio: 1.5:1 ## Design and Implementation The project involved: - CAD modeling in Fusion 360 - Gear design optimization to reduce interference - 3D printing on an Artillery Sidewinder X1 - Assembly with focus on the spring mechanism - TPU material for rear tire traction The design uses translating pink and orange gears that mesh with the main blue gear. This creates separate gear trains for forward and reverse movement, allowing for the difference between input and output displacement. ## Testing Results Testing of the mechanism showed: - Travel distance up to 15 feet from full pullback - First prototype: 22:1 displacement ratio - Second prototype: 25:1 displacement ratio - Consistent performance in repeated tests ## Lessons Learned The project provided experience with: - Gear train design - 3D printing tolerances - Spring mechanics - Material selection [Watch the demonstration →](https://www.youtube.com/watch?v=a9JcV-hAEtk) *This project was completed as part of ME 3604 coursework by Josh Mosier and Zach Sucher.*",
  "saber-maker": "Have you ever wished for more variety in Beat Saber maps? Saber Maker might be the answer you've been looking for—an automated tool that generates Beat Saber maps from your favorite audio files. ## The Problem Beat Saber is an immensely popular VR rhythm game, where players slice flying blocks to the beat of the music. Despite its thrilling gameplay, the base game only includes 12 songs. Although the community has created many custom maps, these are predominantly EDM or death metal tracks. Crafting maps is labor-intensive, often requiring hours of effort per minute of a song. ## Our Solution Saber Maker eliminates the manual effort of map creation by using AI to generate Beat Saber maps automatically. Upload any audio file, and Saber Maker does the rest—detecting the beat and notes and generating a playable map instantly. This not only reduces map creation time but also opens up possibilities for maps based on a more diverse range of music genres. ## How It Works Saber Maker uses neural networks to analyze audio files and create custom map files for Beat Saber. Here's the process: 1. **Beat and Note Detection**: AI models detect patterns, rhythm, and notes in the song. 2. **Map Generation**: Based on this analysis, the tool generates a fully playable Beat Saber map compatible with the game. 3. **Training Data**: Saber Maker's models were trained on data collected from community sites like bsaber. With this approach, Saber Maker transforms how players experience Beat Saber, offering unlimited variety and a faster way to enjoy new music. ## Built With The technology stack includes: - **Python** for backend AI processing - **JavaScript** and **jQuery** for the frontend interface ## What’s Next? Saber Maker sets the stage for expanded accessibility and creativity in VR rhythm gaming. It reduces barriers for creators, offering tools to generate maps for songs across all genres. Whether you're a fan of pop, classical, or jazz, Saber Maker promises to enrich your Beat Saber experience. Explore the project on [Devpost](https://devpost.com/software/saber-maker) and start building your perfect playlist today!",
  "senior-design": "As part of my senior design team at Virginia Tech, we tackled this problem by developing a novel haptic wristband that could bridge the communication gap between robots and their human operators. ## The Problem When working with robotic systems, particularly in shared autonomy scenarios, it's often unclear what the robot has learned or when it needs additional guidance. Traditional visual feedback requires constantly watching the robot, which isn't always practical when you need to multitask. We needed a way to let the robot \"tap you on the wrist\" when it needed help. ## The Solution Our solution was a lightweight, wireless haptic wristband that provides two types of feedback: - A gentle squeeze mechanism that can alert the user when the robot needs attention - Six vibrotactors arranged around the wrist that can create directional patterns to guide user input ## Building the Device ### The Squeeze Mechanism One of our biggest innovations was the cord and reel system controlled by a high-torque N20 DC motor. We designed it to provide gentle but noticeable squeeze notifications while keeping the band comfortable during extended wear. The cord is never in direct contact with the wearer's skin, and we normally keep it in a relaxed state. ### Vibrotactile Feedback We incorporated six cylindrical ERM motors evenly spaced around the wristband. Each vibrotactor sits in a custom resin-printed housing that transfers vibrations directly to the skin. One of the trickiest parts was designing the accordion-style band that could fit different wrist sizes while keeping vibrations isolated between motors. ### Housing Design The electronics housing went through several iterations before we got it right. We needed to fit the microcontroller, battery, squeeze mechanism, and motor drivers in a compact package while keeping it lightweight and comfortable. The final design uses a modular approach that makes assembly and maintenance straightforward. ## Technical Challenges Some of the biggest challenges we faced included: - Designing a flexible band that could accommodate different wrist sizes while maintaining consistent haptic feedback - Creating a squeeze mechanism that was both gentle and reliable - Managing power consumption to ensure the wireless device could operate for extended periods - Isolating vibrations between motors to create clear directional cues ## Results Our user studies showed that the wristband, when combined with augmented reality feedback, significantly improved human-robot interaction. Users could focus on other tasks while remaining responsive to the robot's needs, and the directional haptic cues helped them provide more effective guidance when needed. ## Future Possibilities This project opened up exciting possibilities for human-robot interaction. Some potential future developments include: - Adding more sophisticated haptic patterns for complex communications - Incorporating additional sensors for context-aware feedback - Developing specialized versions for different industrial or assistive robotics applications - Exploring applications beyond robotics in areas like VR/AR interaction --- Looking back, this project taught me invaluable lessons about hardware development, user-centered design, and the importance of multimodal feedback in human-robot interaction. It's exciting to see how a relatively simple device can make such a meaningful difference in how humans and robots work together.",
  "speakirby": "For our family's \"Sibling Santa\" gift exchange, I designed and 3D-printed a Super Smash Bros. Melee-styled trophy featuring Kirby, with a removable Bluetooth speaker module integrated into his mouth. ## Design Process The design was inspired by the trophy collection from Super Smash Bros. Melee, featuring Kirby in his classic pose on a golden base. I modeled the design in Fusion 360, ensuring the mouth opening would perfectly fit a standard Bluetooth speaker module while maintaining the character's iconic proportions. - Created the basic Kirby shape using reference images from SSBM - Designed the mouth cavity to securely hold a removable Bluetooth speaker - Engineered the base with proper support for the top-heavy design - Added subtle details to match the SSBM trophy aesthetic ## Printing and Finishing The trophy was printed in multiple parts using PLA: - Main Kirby body in pink PLA - Base in gold-colored PLA - Custom-designed internal mounting system for the speaker The finishing process was crucial for achieving a professional look: 1. Carefully primed the printed parts 2. Airbrushed the body to achieve a smooth, even pink finish 3. Created custom eye designs and printed them on sticker paper 4. Applied the eye stickers 5. Sealed with clear coat for durability",
  "spurious-correlations": "Ever wonder if the stock market follows the same trends as Wikipedia page views about banana bread? No? Well, inspired by Tyler Vigen's \"Spurious Correlations,\" I built a tool to find the most absurd connections between S&P 500 stock prices and Wikipedia page view statistics. >*Correlation will imply causation* ## The \"Problem\" Stock market analysts spend countless hours trying to predict market movements using technical analysis, fundamental research, and probably crystal balls. But what if the real indicators were hiding in plain sight... on Wikipedia? ## The \"Solution\" I created a tool that: - Downloads historical S&P 500 stock prices - Grabs Wikipedia page view statistics - Finds correlations between them - Visualizes these statistically insignificant relationships ## Technical Implementation - **Data Collection**: Python scripts to grab stock prices and Wikipedia pageviews - **Storage**: SQLite database - **Analysis**: Pandas for number crunching and correlation hunting - **Visualization**: Streamlit dashboard for interactive exploration ## Notable Discoveries Some of my favorite \"findings\" include: - A 95% correlation between NVIDIA stock and the article views of \"2025\", \"Geography_of_south_korea\", and \"Assassinated\" - A negative 86% correlation between Exxon Stock and \"Facebook_Messenger\" and \"Faith_in_Christianity\" - Apple stock correlating 94% with the trend of \"Left_Socialist-Revolutionaries\"",
  "streamlit-runner": "I created a small VS Code extension to solve a minor annoyance in my Streamlit development workflow. Instead of typing `streamlit run` in the terminal each time, I wanted a simple right-click option to launch my apps. ## Why I Built This While working on various Streamlit projects, I found myself repeatedly typing the same terminal command. The solution was straightforward - add a context menu option to do this automatically. Nothing groundbreaking, just a small quality-of-life improvement. ## The Implementation The extension is quite simple, consisting of just a few core components: - A command registration for the context menu - Basic terminal management for running the Streamlit command - Simple error handling for missing dependencies ## What I Learned This was my first time creating a VS Code extension, and while it's a very basic one, I learned about: - The basic structure of VS Code extensions - How to interact with VS Code's terminal API - The process of publishing to the VS Code marketplace ## Next Steps While the extension is intentionally minimal, I might add a few small features if users request them: - Basic configuration options - Support for common Streamlit CLI arguments - Simple status indicators",
  "vt-map": "A handcrafted 3D wooden map of Virginia Tech's campus, created as a unique Secret Santa gift. This multi-layered piece combines laser-cut Baltic birch plywood with detailed engravings of campus roads, paths, and buildings to create a striking dimensional representation of the university grounds. ## Design Process The project began with a Virginia Tech campus PDF map, which I converted into separate vector layers for the various map elements. This allowed for precise control over: - Building footprints for the raised 3D elements - Road networks and walking paths - Background terrain details - Campus boundaries and landmarks ## Fabrication Using the makerspace laser cutter in my dorm, I brought the design to life through multiple steps: - Base layer: Laser engraved the ground details and cut the road networks - Building layer: Precision cut all campus buildings from a second sheet of Baltic birch - Assembly: Carefully glued each building in its exact location - Finishing touches: Custom routed wooden frame with glass cover - Final detail: Etched Virginia Tech logo on the glass ## Technical Details The map was created using: - Baltic birch plywood for durability and clean cutting - Multiple laser cutter passes for varying depths - Vector and raster operations for different map elements - Custom frame routing for professional finish - Glass overlay for protection and added dimension *Created in 2020 as part of a Secret Santa exchange*"
};
